{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\shaii\\\\Desktop\\\\projects\\\\MrC\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shaii\\\\Desktop\\\\projects\\\\MrC\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport Permissions from './abis/Permissions.json'; // get web3 provider form metamask\n\nexport function loadWeb3() {\n  return _loadWeb.apply(this, arguments);\n} // get account and smart contruct\n\nfunction _loadWeb() {\n  _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context.next = 6;\n              break;\n            }\n\n            window.web3 = new Web3(window.ethereum);\n            _context.next = 4;\n            return window.ethereum.enable();\n\n          case 4:\n            _context.next = 12;\n            break;\n\n          case 6:\n            if (!window.web3) {\n              _context.next = 10;\n              break;\n            }\n\n            window.web3 = new Web3(window.web3.currentProvider);\n            _context.next = 12;\n            break;\n\n          case 10:\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n            return _context.abrupt(\"return\", null);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadWeb.apply(this, arguments);\n}\n\nexport function loadBlockchainData() {\n  return _loadBlockchainData.apply(this, arguments);\n}\n\nfunction _loadBlockchainData() {\n  _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var web3, accounts, networkId, networkData, permissions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            web3 = window.web3; // Load account\n\n            _context2.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            accounts = _context2.sent;\n            _context2.next = 6;\n            return web3.eth.net.getId();\n\n          case 6:\n            networkId = _context2.sent;\n            networkData = Permissions.networks[networkId];\n\n            if (!networkData) {\n              _context2.next = 13;\n              break;\n            }\n\n            permissions = web3.eth.Contract(Permissions.abi, networkData.address);\n            return _context2.abrupt(\"return\", {\n              account: accounts[0],\n              permissions: permissions\n            });\n\n          case 13:\n            window.alert('MrC contract not deployed to detected network.');\n            return _context2.abrupt(\"return\", null);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadBlockchainData.apply(this, arguments);\n}\n\nexport function checkPrivateKeySuitableToAccount(address, privateKey) {\n  var web3 = window.web3;\n  var account = web3.eth.accounts.privateKeyToAccount('0x' + privateKey);\n  return address === account.address;\n}","map":{"version":3,"sources":["C:/Users/shaii/Desktop/projects/MrC/src/loadBlockchain.js"],"names":["Web3","Permissions","loadWeb3","window","ethereum","web3","enable","currentProvider","alert","loadBlockchainData","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","permissions","Contract","abi","address","account","checkPrivateKeySuitableToAccount","privateKey","privateKeyToAccount"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,yBAAxB,C,CAEA;;AACA,gBAAsBC,QAAtB;AAAA;AAAA,C,CAcA;;;sEAdO;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDC,MAAM,CAACC,QADN;AAAA;AAAA;AAAA;;AAEHD,YAAAA,MAAM,CAACE,IAAP,GAAc,IAAIL,IAAJ,CAASG,MAAM,CAACC,QAAhB,CAAd;AAFG;AAAA,mBAGGD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAHH;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAKIH,MAAM,CAACE,IALX;AAAA;AAAA;AAAA;;AAMHF,YAAAA,MAAM,CAACE,IAAP,GAAc,IAAIL,IAAJ,CAASG,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AANG;AAAA;;AAAA;AASHJ,YAAAA,MAAM,CAACK,KAAP,CAAa,qEAAb;AATG,6CAUI,IAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeP,gBAAsBC,kBAAtB;AAAA;AAAA;;;iFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACCJ,YAAAA,IADD,GACQF,MAAM,CAACE,IADf,EAEL;;AAFK;AAAA,mBAGkBA,IAAI,CAACK,GAAL,CAASC,WAAT,EAHlB;;AAAA;AAGCC,YAAAA,QAHD;AAAA;AAAA,mBAImBP,IAAI,CAACK,GAAL,CAASG,GAAT,CAAaC,KAAb,EAJnB;;AAAA;AAICC,YAAAA,SAJD;AAKCC,YAAAA,WALD,GAKef,WAAW,CAACgB,QAAZ,CAAqBF,SAArB,CALf;;AAAA,iBAMFC,WANE;AAAA;AAAA;AAAA;;AAOGE,YAAAA,WAPH,GAOiBb,IAAI,CAACK,GAAL,CAASS,QAAT,CAAkBlB,WAAW,CAACmB,GAA9B,EAAmCJ,WAAW,CAACK,OAA/C,CAPjB;AAAA,8CAQI;AAACC,cAAAA,OAAO,EAACV,QAAQ,CAAC,CAAD,CAAjB;AAAsBM,cAAAA,WAAW,EAACA;AAAlC,aARJ;;AAAA;AAUHf,YAAAA,MAAM,CAACK,KAAP,CAAa,gDAAb;AAVG,8CAWI,IAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeP,OAAO,SAASe,gCAAT,CAA0CF,OAA1C,EAAmDG,UAAnD,EAA8D;AACnE,MAAMnB,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,MAAMiB,OAAO,GAAGjB,IAAI,CAACK,GAAL,CAASE,QAAT,CAAkBa,mBAAlB,CAAsC,OAAOD,UAA7C,CAAhB;AACA,SAAOH,OAAO,KAAKC,OAAO,CAACD,OAA3B;AACD","sourcesContent":["import Web3 from 'web3';\nimport Permissions from './abis/Permissions.json';\n\n// get web3 provider form metamask\nexport async function loadWeb3() {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n  }\n  else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  }\n  else {\n    window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    return null;\n  }\n}\n\n// get account and smart contruct\nexport async function loadBlockchainData() {\n  const web3 = window.web3;\n  // Load account\n  const accounts = await web3.eth.getAccounts();\n  const networkId = await web3.eth.net.getId();\n  const networkData = Permissions.networks[networkId];\n  if(networkData) {\n    const permissions = web3.eth.Contract(Permissions.abi, networkData.address);\n    return {account:accounts[0], permissions:permissions};\n  } else {\n    window.alert('MrC contract not deployed to detected network.');\n    return null;\n  }\n}\n\nexport function checkPrivateKeySuitableToAccount(address, privateKey){\n  const web3 = window.web3;\n  const account = web3.eth.accounts.privateKeyToAccount('0x' + privateKey);\n  return address === account.address;\n}\n"]},"metadata":{},"sourceType":"module"}