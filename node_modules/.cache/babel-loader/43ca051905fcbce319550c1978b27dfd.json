{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shaii\\\\Desktop\\\\projects\\\\MrC\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shaii\\\\Desktop\\\\projects\\\\MrC\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar AddressValid = /*#__PURE__*/function () {\n  function AddressValid() {\n    _classCallCheck(this, AddressValid);\n  }\n\n  _createClass(AddressValid, null, [{\n    key: \"isAddress\",\n\n    /**\r\n    * Checks if the given string is an address\r\n    *\r\n    * @method isAddress\r\n    * @param {String} address the given HEX adress\r\n    * @return {Boolean}\r\n    */\n    value: function isAddress(address) {\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        // check if it has the basic requirements of an address\n        return false;\n      } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n        // If it's all small caps or all all caps, return true\n        return true;\n      } else {\n        // Otherwise check each case\n        return AddressValid.isChecksumAddress(address);\n      }\n    }\n  }, {\n    key: \"isChecksumAddress\",\n\n    /**\r\n     * Checks if the given string is a checksummed address\r\n     *\r\n     * @method isChecksumAddress\r\n     * @param {String} address the given HEX adress\r\n     * @return {Boolean}\r\n    */\n    value: function isChecksumAddress(address) {\n      // Check each case\n      address = address.replace('0x', '');\n      var addressHash = sha3(address.toLowerCase());\n\n      for (var i = 0; i < 40; i++) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return AddressValid;\n}();\n\nexport default AddressValid;","map":{"version":3,"sources":["C:/Users/shaii/Desktop/projects/MrC/src/models/AddressValidation.js"],"names":["AddressValid","address","test","isChecksumAddress","replace","addressHash","sha3","toLowerCase","i","parseInt","toUpperCase"],"mappings":";;;IACMA,Y;;;;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;8BACkBC,O,EAAS;AACvB,UAAI,CAAC,uBAAuBC,IAAvB,CAA4BD,OAA5B,CAAL,EAA2C;AACvC;AACA,eAAO,KAAP;AACH,OAHD,MAGO,IAAI,sBAAsBC,IAAtB,CAA2BD,OAA3B,KAAuC,sBAAsBC,IAAtB,CAA2BD,OAA3B,CAA3C,EAAgF;AACnF;AACA,eAAO,IAAP;AACH,OAHM,MAGA;AACH;AACA,eAAOD,YAAY,CAACG,iBAAb,CAA+BF,OAA/B,CAAP;AACH;AACJ;;;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;sCAEyBA,O,EAAU;AAC/B;AACAA,MAAAA,OAAO,GAAGA,OAAO,CAACG,OAAR,CAAgB,IAAhB,EAAqB,EAArB,CAAV;AACA,UAAIC,WAAW,GAAGC,IAAI,CAACL,OAAO,CAACM,WAAR,EAAD,CAAtB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA8B;AAC1B;AACA,YAAKC,QAAQ,CAACJ,WAAW,CAACG,CAAD,CAAZ,EAAiB,EAAjB,CAAR,GAA+B,CAA/B,IAAoCP,OAAO,CAACO,CAAD,CAAP,CAAWE,WAAX,OAA6BT,OAAO,CAACO,CAAD,CAAzE,IAAkFC,QAAQ,CAACJ,WAAW,CAACG,CAAD,CAAZ,EAAiB,EAAjB,CAAR,IAAgC,CAAhC,IAAqCP,OAAO,CAACO,CAAD,CAAP,CAAWD,WAAX,OAA6BN,OAAO,CAACO,CAAD,CAA/J,EAAqK;AACjK,iBAAO,KAAP;AACH;AACJ;;AACD,aAAO,IAAP;AACH;;;;;;AAGD,eAAeR,YAAf","sourcesContent":["\r\nclass AddressValid {\r\n    /**\r\n * Checks if the given string is an address\r\n *\r\n * @method isAddress\r\n * @param {String} address the given HEX adress\r\n * @return {Boolean}\r\n*/\r\n static isAddress(address) {\r\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\r\n        // check if it has the basic requirements of an address\r\n        return false;\r\n    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\r\n        // If it's all small caps or all all caps, return true\r\n        return true;\r\n    } else {\r\n        // Otherwise check each case\r\n        return AddressValid.isChecksumAddress(address);\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the given string is a checksummed address\r\n *\r\n * @method isChecksumAddress\r\n * @param {String} address the given HEX adress\r\n * @return {Boolean}\r\n*/\r\n\r\nstatic isChecksumAddress(address)  {\r\n    // Check each case\r\n    address = address.replace('0x','');\r\n    var addressHash = sha3(address.toLowerCase());\r\n    for (var i = 0; i < 40; i++ ) {\r\n        // the nth letter should be uppercase if the nth digit of casemap is 1\r\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n}\r\n\r\nexport default AddressValid;"]},"metadata":{},"sourceType":"module"}