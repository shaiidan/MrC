{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\shaii\\\\Desktop\\\\projects\\\\MrC\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shaii\\\\Desktop\\\\projects\\\\MrC\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport Permissions from './abis/Permissions.json'; // get web3 provider form metamask\n\nexport function loadWeb3() {\n  return _loadWeb.apply(this, arguments);\n} // get account and smart contruct\n\nfunction _loadWeb() {\n  _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context.next = 6;\n              break;\n            }\n\n            window.web3 = new Web3(window.ethereum);\n            _context.next = 4;\n            return window.ethereum.enable();\n\n          case 4:\n            _context.next = 7;\n            break;\n\n          case 6:\n            if (window.web3) {\n              window.web3 = new Web3(window.web3.currentProvider);\n            } else {\n              window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadWeb.apply(this, arguments);\n}\n\nexport function loadBlockchainData() {\n  return _loadBlockchainData.apply(this, arguments);\n}\n\nfunction _loadBlockchainData() {\n  _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var web3, accounts, networkId, networkData, permissions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            web3 = window.web3;\n            winf.ethereum.on('accountsChanged', function (accounts) {\n              window.location.href(\"/\");\n            }); // Load account\n\n            _context2.next = 4;\n            return web3.eth.getAccounts();\n\n          case 4:\n            accounts = _context2.sent;\n            _context2.next = 7;\n            return web3.eth.net.getId();\n\n          case 7:\n            networkId = _context2.sent;\n            networkData = Permissions.networks[networkId];\n\n            if (!networkData) {\n              _context2.next = 14;\n              break;\n            }\n\n            permissions = web3.eth.Contract(Permissions.abi, networkData.address);\n            return _context2.abrupt(\"return\", {\n              account: accounts[0],\n              permissions: permissions\n            });\n\n          case 14:\n            window.alert('MrC contract not deployed to detected network.');\n            return _context2.abrupt(\"return\", null);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadBlockchainData.apply(this, arguments);\n}\n\nexport function checkPrivateKeySuitableToAccount(address, privateKey) {\n  var web3 = window.web3;\n  var account = web3.eth.accounts.privateKeyToAccount('0x' + privateKey);\n  return address === account.address;\n}","map":{"version":3,"sources":["C:/Users/shaii/Desktop/projects/MrC/src/loadBlockchain.js"],"names":["Web3","Permissions","loadWeb3","window","ethereum","web3","enable","currentProvider","alert","loadBlockchainData","winf","on","accounts","location","href","eth","getAccounts","net","getId","networkId","networkData","networks","permissions","Contract","abi","address","account","checkPrivateKeySuitableToAccount","privateKey","privateKeyToAccount"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,yBAAxB,C,CAEA;;AACA,gBAAsBC,QAAtB;AAAA;AAAA,C,CAaA;;;sEAbO;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDC,MAAM,CAACC,QADN;AAAA;AAAA;AAAA;;AAEHD,YAAAA,MAAM,CAACE,IAAP,GAAc,IAAIL,IAAJ,CAASG,MAAM,CAACC,QAAhB,CAAd;AAFG;AAAA,mBAGGD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAHH;;AAAA;AAAA;AAAA;;AAAA;AAKA,gBAAIH,MAAM,CAACE,IAAX,EAAiB;AACpBF,cAAAA,MAAM,CAACE,IAAP,GAAc,IAAIL,IAAJ,CAASG,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACD,aAFI,MAGA;AACHJ,cAAAA,MAAM,CAACK,KAAP,CAAa,qEAAb;AACD;;AAVI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcP,gBAAsBC,kBAAtB;AAAA;AAAA;;;iFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACCJ,YAAAA,IADD,GACQF,MAAM,CAACE,IADf;AAELK,YAAAA,IAAI,CAACN,QAAL,CAAcO,EAAd,CAAiB,iBAAjB,EAAoC,UAAUC,QAAV,EAAoB;AACtDT,cAAAA,MAAM,CAACU,QAAP,CAAgBC,IAAhB,CAAqB,GAArB;AACD,aAFD,EAFK,CAML;;AANK;AAAA,mBAOkBT,IAAI,CAACU,GAAL,CAASC,WAAT,EAPlB;;AAAA;AAOCJ,YAAAA,QAPD;AAAA;AAAA,mBAQmBP,IAAI,CAACU,GAAL,CAASE,GAAT,CAAaC,KAAb,EARnB;;AAAA;AAQCC,YAAAA,SARD;AASCC,YAAAA,WATD,GASenB,WAAW,CAACoB,QAAZ,CAAqBF,SAArB,CATf;;AAAA,iBAUFC,WAVE;AAAA;AAAA;AAAA;;AAWGE,YAAAA,WAXH,GAWiBjB,IAAI,CAACU,GAAL,CAASQ,QAAT,CAAkBtB,WAAW,CAACuB,GAA9B,EAAmCJ,WAAW,CAACK,OAA/C,CAXjB;AAAA,8CAYI;AAACC,cAAAA,OAAO,EAACd,QAAQ,CAAC,CAAD,CAAjB;AAAsBU,cAAAA,WAAW,EAACA;AAAlC,aAZJ;;AAAA;AAcHnB,YAAAA,MAAM,CAACK,KAAP,CAAa,gDAAb;AAdG,8CAeI,IAfJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmBP,OAAO,SAASmB,gCAAT,CAA0CF,OAA1C,EAAmDG,UAAnD,EAA8D;AACnE,MAAMvB,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,MAAMqB,OAAO,GAAGrB,IAAI,CAACU,GAAL,CAASH,QAAT,CAAkBiB,mBAAlB,CAAsC,OAAOD,UAA7C,CAAhB;AACA,SAAOH,OAAO,KAAKC,OAAO,CAACD,OAA3B;AACD","sourcesContent":["import Web3 from 'web3'\r\nimport Permissions from './abis/Permissions.json'\r\n\r\n// get web3 provider form metamask\r\nexport async function loadWeb3() {\r\n  if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum)\r\n    await window.ethereum.enable()\r\n  }\r\n  else if (window.web3) {\r\n    window.web3 = new Web3(window.web3.currentProvider)\r\n  }\r\n  else {\r\n    window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n  }\r\n}\r\n\r\n// get account and smart contruct\r\nexport async function loadBlockchainData() {\r\n  const web3 = window.web3\r\n  winf.ethereum.on('accountsChanged', function (accounts) {\r\n    window.location.href(\"/\")\r\n  })\r\n  \r\n  // Load account\r\n  const accounts = await web3.eth.getAccounts()\r\n  const networkId = await web3.eth.net.getId()\r\n  const networkData = Permissions.networks[networkId]\r\n  if(networkData) {\r\n    const permissions = web3.eth.Contract(Permissions.abi, networkData.address)\r\n    return {account:accounts[0], permissions:permissions}\r\n  } else {\r\n    window.alert('MrC contract not deployed to detected network.')\r\n    return null\r\n  }\r\n}\r\n\r\nexport function checkPrivateKeySuitableToAccount(address, privateKey){\r\n  const web3 = window.web3\r\n  const account = web3.eth.accounts.privateKeyToAccount('0x' + privateKey)\r\n  return address === account.address\r\n}\r\n"]},"metadata":{},"sourceType":"module"}