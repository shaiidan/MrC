{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\shaii\\\\Desktop\\\\projects\\\\MrC\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shaii\\\\Desktop\\\\projects\\\\MrC\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport Permissions from '../abis/Permissions.json';\nexport function loadWeb3() {\n  return _loadWeb.apply(this, arguments);\n}\n\nfunction _loadWeb() {\n  _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context.next = 6;\n              break;\n            }\n\n            window.web3 = new Web3(window.ethereum);\n            _context.next = 4;\n            return window.ethereum.enable();\n\n          case 4:\n            _context.next = 7;\n            break;\n\n          case 6:\n            if (window.web3) {\n              window.web3 = new Web3(window.web3.currentProvider);\n            } else {\n              window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadWeb.apply(this, arguments);\n}\n\nexport function loadBlockchainData() {\n  return _loadBlockchainData.apply(this, arguments);\n}\n\nfunction _loadBlockchainData() {\n  _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var web3, accounts, networkId, networkData, permissions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            web3 = window.web3; // Load account\n\n            _context2.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            accounts = _context2.sent;\n            this.setState({\n              account: accounts[0]\n            });\n            saveToLocalStorage(this.state); // save local storage\n\n            _context2.next = 8;\n            return web3.eth.net.getId();\n\n          case 8:\n            networkId = _context2.sent;\n            networkData = Permissions.networks[networkId];\n\n            if (!networkData) {\n              _context2.next = 15;\n              break;\n            }\n\n            permissions = web3.eth.Contract(Permissions.abi, networkData.address);\n            return _context2.abrupt(\"return\", {\n              account: accounts[0],\n              permissions: permissions\n            });\n\n          case 15:\n            window.alert('MrC contract not deployed to detected network.');\n            return _context2.abrupt(\"return\", null);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _loadBlockchainData.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/shaii/Desktop/projects/MrC/src/loadBlockchain.js"],"names":["Web3","Permissions","loadWeb3","window","ethereum","web3","enable","currentProvider","alert","loadBlockchainData","eth","getAccounts","accounts","setState","account","saveToLocalStorage","state","net","getId","networkId","networkData","networks","permissions","Contract","abi","address"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,gBAAsBC,QAAtB;AAAA;AAAA;;;sEAAO;AAAA;AAAA;AAAA;AAAA;AAAA,iBACCC,MAAM,CAACC,QADR;AAAA;AAAA;AAAA;;AAEDD,YAAAA,MAAM,CAACE,IAAP,GAAc,IAAIL,IAAJ,CAASG,MAAM,CAACC,QAAhB,CAAd;AAFC;AAAA,mBAGKD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAHL;;AAAA;AAAA;AAAA;;AAAA;AAKE,gBAAIH,MAAM,CAACE,IAAX,EAAiB;AACpBF,cAAAA,MAAM,CAACE,IAAP,GAAc,IAAIL,IAAJ,CAASG,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACD,aAFI,MAGA;AACHJ,cAAAA,MAAM,CAACK,KAAP,CAAa,qEAAb;AACD;;AAVE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaP,gBAAsBC,kBAAtB;AAAA;AAAA;;;iFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACGJ,YAAAA,IADH,GACUF,MAAM,CAACE,IADjB,EAEH;;AAFG;AAAA,mBAGoBA,IAAI,CAACK,GAAL,CAASC,WAAT,EAHpB;;AAAA;AAGGC,YAAAA,QAHH;AAIH,iBAAKC,QAAL,CAAc;AAAEC,cAAAA,OAAO,EAAEF,QAAQ,CAAC,CAAD;AAAnB,aAAd;AACAG,YAAAA,kBAAkB,CAAC,KAAKC,KAAN,CAAlB,CALG,CAK4B;;AAL5B;AAAA,mBAMqBX,IAAI,CAACK,GAAL,CAASO,GAAT,CAAaC,KAAb,EANrB;;AAAA;AAMGC,YAAAA,SANH;AAOGC,YAAAA,WAPH,GAOiBnB,WAAW,CAACoB,QAAZ,CAAqBF,SAArB,CAPjB;;AAAA,iBAQAC,WARA;AAAA;AAAA;AAAA;;AASKE,YAAAA,WATL,GASmBjB,IAAI,CAACK,GAAL,CAASa,QAAT,CAAkBtB,WAAW,CAACuB,GAA9B,EAAmCJ,WAAW,CAACK,OAA/C,CATnB;AAAA,8CAUM;AAACX,cAAAA,OAAO,EAACF,QAAQ,CAAC,CAAD,CAAjB;AAAsBU,cAAAA,WAAW,EAACA;AAAlC,aAVN;;AAAA;AAYDnB,YAAAA,MAAM,CAACK,KAAP,CAAa,gDAAb;AAZC,8CAaM,IAbN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import Web3 from 'web3'\r\nimport Permissions from '../abis/Permissions.json'\r\n\r\nexport async function loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\nexport async function loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    saveToLocalStorage(this.state) // save local storage\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = Permissions.networks[networkId]\r\n    if(networkData) {\r\n      const permissions = web3.eth.Contract(Permissions.abi, networkData.address)\r\n      return {account:accounts[0], permissions:permissions}\r\n    } else {\r\n      window.alert('MrC contract not deployed to detected network.')\r\n      return null\r\n    }\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}